{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4NAEe,SAASA,EAAMC,GAwB1B,IAAIC,EAAU,CACVC,MAAsB,SAAfF,EAAMG,KAAgB,QAAQ,UACrCC,gBAAgC,SAAfJ,EAAMG,KAAgB,iBAAiB,SAG5D,OACI,sBAAKE,UAAU,YAAf,UACI,oBAAIA,UAAU,OAAOC,MAAO,CAACJ,MAAsB,SAAfF,EAAMG,KAAgB,QAAQ,WAAlE,sBACA,sBAAKE,UAAU,YAAYE,GAAG,mBAAmBD,MAAOL,EAAxD,UACI,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACA,wBAAQF,UAAU,mBAAmBC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9J,SACI,2DAGJ,qBAAKD,GAAG,cAAcF,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACA,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,+CADJ,6GAKJ,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACA,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzK,SACI,qDAGJ,qBAAKD,GAAG,cAAcF,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACA,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,+CADJ,qHACgJ,+CADhJ,sHAKJ,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,eAApC,SACA,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3K,SACI,4DAGJ,qBAAKD,GAAG,gBAAgBF,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACA,qBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,4NAMR,qBAAKI,UAAU,iB,WCpEZ,SAASI,EAAOT,GAC7B,OACE,qBAAKK,UAAS,yCAAoCL,EAAMG,KAA1C,eAAqDH,EAAMG,MAAzE,SACE,sBAAKE,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeK,GAAG,IAAlC,SACGV,EAAMW,QAET,wBACEN,UAAU,iBACVG,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMH,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACE,qBAAIF,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAW,eAAa,OAAOK,GAAG,IAAlD,oBAIF,oBAAIL,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,SAA9B,SACGV,EAAMY,iBAIb,sBAAKP,UAAS,sCAAgD,UAAfL,EAAMG,KAAiB,OAAO,SAA7E,UACI,uBAAOE,UAAU,mBAAmBQ,QAASb,EAAMc,WAAYN,KAAK,WAAWO,KAAK,SAASR,GAAG,2BAChG,uBAAOF,UAAU,mBAAmBW,QAAQ,yBAA5C,yCCnCC,SAASC,EAASjB,GAC7B,IAiCA,EAAwBkB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACA,sBAAKf,UAAU,YAAYC,MAAO,CAACJ,MAAsB,SAAfF,EAAMG,KAAgB,QAAQ,WAAxE,UACI,oBAAIE,UAAU,OAAd,SAAsBL,EAAMqB,UAC5B,qBAAKhB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAeiB,MAAOH,EAAMI,SAxBrC,SAACC,GAEpBJ,EAAQI,EAAMC,OAAOH,QAsB6DhB,MAAO,CAACF,gBAAgC,SAAfJ,EAAMG,KAAgB,UAAU,QAASD,MAAsB,SAAfF,EAAMG,KAAgB,QAAQ,WAAYI,GAAG,QAAQmB,KAAK,QAEjN,wBAAQC,SAA0B,IAAhBR,EAAKS,OAAcvB,UAAU,4BAA4BQ,QA3C7D,WAElB,IAAIgB,EAAUV,EAAKW,cACnBV,EAAQS,GACR7B,EAAM+B,UAAU,yBAA0B,YAuCtC,iCACA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAAcvB,UAAU,4BAA4BQ,QAtC5D,WAEnB,IAAIgB,EAAUV,EAAKa,cACnBZ,EAAQS,GACR7B,EAAM+B,UAAU,yBAA0B,YAkCtC,iCACA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAAcvB,UAAU,4BAA4BQ,QAjC/D,WAEhBO,EADc,IAEdpB,EAAM+B,UAAU,eAAgB,YA8B5B,wBACA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAAcvB,UAAU,4BAA4BQ,QAzBhE,WAGfoB,UAAUC,UAAUC,UAAUhB,GAE9BnB,EAAM+B,UAAU,sBAAuB,YAoBnC,wBACA,wBAAQJ,SAA0B,IAAhBR,EAAKS,OAAcvB,UAAU,4BAA4BQ,QAnBzD,WACtB,IAAIgB,EAAUV,EAAKiB,MAAM,QACzBhB,EAAQS,EAAQQ,KAAK,MACrBrC,EAAM+B,UAAU,sBAAuB,YAgBnC,qCAEJ,sBAAK1B,UAAU,iBAAiBC,MAAO,CAACJ,MAAsB,SAAfF,EAAMG,KAAgB,QAAQ,WAA7E,UACI,mDACA,8BAAIgB,EAAKiB,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OAArE,cAAwFT,EAAKS,OAA7F,iBACA,8BAAI,KAAQT,EAAKiB,MAAM,KAAKE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OAA3E,mBACA,yCACA,4BAAIT,EAAKS,OAAS,EAAET,EAAM,6BCvDvB,SAASqB,EAAMxC,GAK1B,OACI,qBAAKM,MAAO,CAACmC,OAAQ,QAArB,SACCzC,EAAM0C,OAAS,sBAAKrC,UAAS,sBAAiBL,EAAM0C,MAAMlC,KAA7B,gCAAiEO,KAAK,QAApF,UACZ,iCAPW,SAAC4B,GAChB,IAAMC,EAAQD,EAAKX,cACnB,OAAOY,EAAMC,OAAO,GAAGf,cAAgBc,EAAME,MAAM,GAKtCC,CAAW/C,EAAM0C,MAAMlC,QADpB,KACsCR,EAAM0C,MAAMM,SFqC1EvC,EAAOwC,aAAe,CACpBtC,MAAO,iBACPC,UAAW,Y,WGoBEsC,MAvDf,WACE,MAAwBhC,mBAAS,SAAjC,mBAAOf,EAAP,KAAagD,EAAb,KACA,EAA0BjC,mBAAS,MAAnC,mBAAOwB,EAAP,KAAcU,EAAd,KAEMrB,EAAY,SAACsB,EAAS7C,GACxB4C,EAAS,CACPJ,IAAKK,EACL7C,KAAMA,IAER8C,YAAW,WACPF,EAAS,QACV,OAsBP,OACE,mCAGA,eAAC,IAAD,WACA,cAAC3C,EAAD,CAAQE,MAAM,YAAYR,KAAMA,EAAMW,WAzBrB,WACL,UAATX,GACDgD,EAAQ,QACRI,SAASC,KAAKlD,MAAMF,gBAAkB,UACtC2B,EAAU,6BAA8B,aAUxCoB,EAAQ,SACRI,SAASC,KAAKlD,MAAMF,gBAAkB,QACtC2B,EAAU,8BAA+B,eAU3C,cAACS,EAAD,CAAOE,MAAOA,IACd,qBAAKrC,UAAU,iBAAf,SACA,eAAC,IAAD,WAEM,cAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC3D,EAAD,CAAOI,KAAMA,MAEf,cAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,IAAlB,SACE,cAACzC,EAAD,CAAUc,UAAWA,EAAWV,QAAQ,sEAAsElB,KAAMA,iBCjDjHwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.7bceae43.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white',\r\n    // })\r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    // const toggleStyle = () =>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             // border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'#042743',\r\n        backgroundColor: props.mode === 'dark'?'rgb(36 74 104)':'white',\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"my-3\" style={{color: props.mode === 'dark'?'white':'#042743'}}>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        <strong>Analyze your Text</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>TextUtils</strong> gives you a way to analyze your text quickly and efficiently. Be it word count,Character count or \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong>Free to Use</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>TextUtils</strong> is afree character counter tool that provides instant character count and word count statistics for a given text.<strong>TextUtils</strong>reports the number of words and characters.thus It is suitable for writing text with word/character Limits.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        <strong>Browser Compatible</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        This word counter software works in any web browser such as chrome, Internet Explorer, Safari, opera,etc.It suits to counter characters in facebook, blog, excel document, pdf document, essays , etc.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n            {/* <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary my-3\">{btntext}</button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n         </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About Us\",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was Clicked:\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    const handleLowClick = () =>{\r\n        // console.log(\"Uppercase was Clicked:\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n    const handleClear = () =>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"Uppercase was Clicked\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () =>{\r\n        // let newText = document.getElementById(\"myBox\");\r\n        // newText.select();\r\n        navigator.clipboard.writeText(text);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"ExtraSpaces Removed\", \"success\");\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    // text = \"new text\" // wrong way to change the state\r\n    // setText(\"Nnew text\") // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#042743'}} >\r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'#13466e':'white', color: props.mode === 'dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Convert to Upercase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLowClick}>Convert to Upercase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClear}>Clear Text</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy Text </button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces </button>\r\n        </div>\r\n        <div className=\"container mi-3\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n            <h2>your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0?text: \"nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\nimport{\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\n// let name = \"<b>Sumit Vish</b>\";    // we cannot use html tag inside the string,it will show as it is.\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not.\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) =>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n  const toggleMode = () =>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark Mode has been enabled\", \"success\");\r\n      // document.title = 'TextUtils - Dark Mode'\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils is amazing'\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install textUtils now'\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode has been enabled\", \"success\");\r\n      // document.title = 'TextUtils - Light Mode'\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    {/* <Navbar title=\"Textutils\" aboutText=\"About Textutils\"/> */}\r\n    {/* <Navbar/> */}\r\n    <Router>\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    <Switch>\r\n      {/* react matches path partially so it is better to use \"exact path\"  */}\r\n          <Route exact path=\"/about\">\r\n            <About mode={mode}/>\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter,character counter, Remove extra spaces\" mode={mode}/>\r\n          </Route>\r\n    </Switch>\r\n    </div>\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}